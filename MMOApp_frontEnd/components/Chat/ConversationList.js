// components/Chat/ConversationList.js
import React, { useEffect, useState, useContext } from "react";
import { View, Text, FlatList, TouchableOpacity } from "react-native";
import { rtdb } from "../../configs/firebaseConfig";
import { ref, onValue } from "firebase/database";
import { useNavigation } from "@react-navigation/native";
import { MyDispatchContext, MyUserContext } from "../../configs/Contexts";
import MyStyles from "../../styles/MyStyles";
import styles from "./ChatStyle";

const ConversationList = ({ route }) => {
    const user = useContext(MyUserContext);
    const dispatch = useContext(MyDispatchContext);
    const navigation = useNavigation();

    const [conversations, setConversations] = useState([]);

    // n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ redirect sang login
    useEffect(() => {
        if (!user) {
            alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ nh·∫Øn tin!");
            navigation.navigate("login");
        }
    }, [user]);

    if (!user) {
        return null; // ch∆∞a render g√¨ khi ƒëang redirect
    }

    useEffect(() => {
        const chatsRef = ref(rtdb, "chats");

        // listen t·∫•t c·∫£ chats
        const unsub = onValue(chatsRef, (snapshot) => {
            const data = snapshot.val() || {};
            const convs = Object.keys(data)
                .map((chatId) => ({ chatId, ...data[chatId] }))
                // ƒë·∫£m b·∫£o conv.members t·ªìn t·∫°i v√† user ƒëang ·ªü trong members
                .filter((conv) => conv.members && !!conv.members[user.user_code]);

            // sort theo updatedAt m·ªõi nh·∫•t
            convs.sort((a, b) => (b.updatedAt || 0) - (a.updatedAt || 0));
            setConversations(convs);
        });

        return () => unsub();
    }, [user.user_code]);

    const renderItem = ({ item }) => {
        const otherUser = getOtherUser(item, user.user_code);

        return (
            <TouchableOpacity
                style={styles.item}
                onPress={() =>
                    navigation.navigate("chatBox", {
                        user,
                        // truy·ªÅn seller (ƒë·ªëi t∆∞·ª£ng) v·ªõi user_code = otherUser
                        // n·∫øu otherUser === user.user_code (self-chat) th√¨ ChatBox n√™n x·ª≠ l√Ω ph√π h·ª£p
                        seller: { user_code: otherUser },
                        conversation: item, // ti·ªán cho ChatBox n·∫øu c·∫ßn
                    })
                }
            >
                <Text style={styles.chatId} numberOfLines={1} ellipsizeMode="tail">üí¨ {item.chatId}</Text>
                <Text style={styles.last} numberOfLines={1} ellipsizeMode="tail">
                    {item.lastMessage || "No messages yet"}
                </Text>
                <Text style={styles.date}>{item.updatedAt ? new Date(item.updatedAt).toLocaleString() : "Unknown"}</Text>
            </TouchableOpacity>
        );
    };

    return (
        <View style={[MyStyles.container, styles.flex1]}>
            <FlatList
                data={conversations}
                keyExtractor={(item) => item.chatId}
                renderItem={renderItem}
                ListEmptyComponent={
                    <Text style={styles.noChat}>
                        Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o
                    </Text>
                }
            />
        </View>
    );
};

/**
 * Tr·∫£ v·ªÅ user_code c·ªßa "other user".
 * - N·∫øu ch·ªâ 1 ph·∫ßn t·ª≠ trong members => tr·∫£ myId (self-chat)
 * - N·∫øu c√≥ user kh√°c => tr·∫£ user ƒë√≥
 * - Fallback tr·∫£ ph·∫ßn t·ª≠ ƒë·∫ßu ho·∫∑c "Unknown"
 */
const getOtherUser = (conv, myId) => {
    const members = Object.keys(conv.members || {});
    if (members.length === 0) return "Unknown";
    if (members.length === 1) return members[0]; // self-chat l∆∞u 1 ph·∫ßn t·ª≠ => tr·∫£ ch√≠nh user ƒë√≥
    const other = members.find((id) => id !== myId);
    return other || members[0];
};

export default ConversationList;
